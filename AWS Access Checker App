from flask import Flask, request, render_template_string
import boto3
from ipaddress import ip_address, ip_network
import botocore.exceptions
from awslogin import GetAWSCredentials

app = Flask(__name__)

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head><title>AWS Access Checker</title></head>
<body>
  <h2>AWS Access Checker</h2>
  <form method="post">
    AWS Account Code: <input type="text" name="account"><br>
    Source (IP / SG ID / PL ID): <input type="text" name="source"><br>
    Destination IP: <input type="text" name="destination"><br>
    Port: <input type="text" name="port"><br>
    Protocol (TCP/UDP/ALL): <input type="text" name="protocol" value="tcp"><br>
    <input type="submit" value="Check">
  </form>
  {% if result %}
  <h3>Result</h3>
  <pre>{{ result['message'] }}</pre>
  {% if result['rules'] %}
  <h3>Matching Rules</h3>
  <table border="1" cellpadding="5">
    <tr><th>Rule Type</th><th>Source</th><th>Matched Value</th><th>Security Group Name</th><th>Security Group ID</th></tr>
    {% for rule in result['rules'] %}
    <tr>
      <td>{{ rule.type }}</td>
      <td>{{ rule.source }}</td>
      <td>{{ rule.match }}</td>
      <td>{{ rule.sg_name }}</td>
      <td>{{ rule.sg_id }}</td>
    </tr>
    {% endfor %}
  </table>
  {% endif %}
  {% endif %}
</body>
</html>
'''

def get_ec2_client(account):
    try:
        GetAWSCredentials(account)  # Sets global credentials
        return boto3.client('ec2')  # Uses default boto3 with new credentials
    except Exception as e:
        raise RuntimeError(f"Failed to get credentials for account '{account}': {e}")
    except Exception as e:
        raise RuntimeError(f"Failed to get credentials for account '{account}': {e}")

def ip_in_cidr(ip, cidr):
    try:
        return ip_address(ip) in ip_network(cidr)
    except ValueError:
        return False

def find_ips_in_source_sg(ec2, sg_id):
    try:
        ips = set()
        enis = ec2.describe_network_interfaces(Filters=[
            {'Name': 'group-id', 'Values': [sg_id]}
        ])['NetworkInterfaces']
        for eni in enis:
            ips.add(eni['PrivateIpAddress'])
            for p in eni.get('PrivateIpAddresses', []):
                ips.add(p['PrivateIpAddress'])
        return ips
    except botocore.exceptions.ClientError:
        return set()

def is_ip_allowed_by_prefix_lists(ec2, source_ip, prefix_list_ids):
    for pl_id in prefix_list_ids:
        try:
            pl_info = ec2.describe_managed_prefix_lists(PrefixListIds=[pl_id])['PrefixLists'][0]
            version = pl_info['Version']
            entries = ec2.get_managed_prefix_list_entries(PrefixListId=pl_id, TargetVersion=version)['Entries']
            for entry in entries:
                if ip_in_cidr(source_ip, entry['Cidr']):
                    return True, pl_id
        except botocore.exceptions.ClientError:
            continue
    return False, None

def get_enis_for_destination_ip(ec2, dest_ip):
    try:
        matching_enis = []
        all_enis = ec2.describe_network_interfaces()['NetworkInterfaces']
        for eni in all_enis:
            if eni.get('PrivateIpAddress') == dest_ip:
                matching_enis.append(eni['NetworkInterfaceId'])
            for p in eni.get('PrivateIpAddresses', []):
                if p.get('PrivateIpAddress') == dest_ip:
                    matching_enis.append(eni['NetworkInterfaceId'])
        return matching_enis
    except botocore.exceptions.ClientError:
        return []
    except botocore.exceptions.ClientError:
        return []
    except botocore.exceptions.ClientError:
        return []

def get_sg_name(ec2, sg_id):
    try:
        response = ec2.describe_security_groups(GroupIds=[sg_id])
        return response['SecurityGroups'][0].get('GroupName', '')
    except Exception:
        return ''

def check_access(account, source, destination, port, protocol):
    try:
        ec2 = get_ec2_client(account)
    except RuntimeError as e:
        return {"message": str(e), "rules": []}

    try:
        port = int(port)
    except ValueError:
        return {"message": "Invalid port number provided.", "rules": []}

    protocol = protocol.lower()
    if protocol not in ['tcp', 'udp', 'all']:
        return {"message": "Invalid protocol. Please use TCP, UDP, or ALL.", "rules": []}

    result_lines = []
    matched_rules = []
    source_is_ip = source.count('.') == 3

    eni_ids = get_enis_for_destination_ip(ec2, destination)
    if not eni_ids:
        return {"message": f"No ENIs found for destination IP {destination}.", "rules": []}

    for eni_id in eni_ids:
        try:
            eni = ec2.describe_network_interfaces(NetworkInterfaceIds=[eni_id])['NetworkInterfaces'][0]
        except botocore.exceptions.ClientError:
            continue

        for group in eni.get('Groups', []):
            sg_id = group['GroupId']
            sg_name = get_sg_name(ec2, sg_id)
            try:
                sg_data = ec2.describe_security_groups(GroupIds=[sg_id])['SecurityGroups'][0]
            except botocore.exceptions.ClientError:
                continue

            for perm in sg_data.get('IpPermissions', []):
                perm_proto = perm.get('IpProtocol')
                if protocol != 'all' and perm_proto not in [protocol, '-1']:
                    continue
                if perm.get('FromPort') is not None and perm.get('ToPort') is not None and not (perm['FromPort'] <= port <= perm['ToPort']):
                    continue

                for ip_range in perm.get('IpRanges', []):
                    if 'CidrIp' in ip_range and ip_in_cidr(source, ip_range['CidrIp']):
                        matched_rules.append({"type": "IP", "source": source, "match": ip_range['CidrIp'], "sg_name": sg_name, "sg_id": sg_id})

                if source_is_ip:
                    for sg_ref in perm.get('UserIdGroupPairs', []):
                        source_ips = find_ips_in_source_sg(ec2, sg_ref['GroupId'])
                        if source in source_ips:
                            ref_sg_name = get_sg_name(ec2, sg_ref['GroupId'])
                            matched_rules.append({"type": "SG", "source": source, "match": sg_ref['GroupId'], "sg_name": ref_sg_name, "sg_id": sg_ref['GroupId']})

                    pl_ids = [pl['PrefixListId'] for pl in perm.get('PrefixListIds', [])]
                    allowed, pl_id = is_ip_allowed_by_prefix_lists(ec2, source, pl_ids)
                    if allowed:
                        matched_rules.append({"type": "PL", "source": source, "match": pl_id, "sg_name": sg_name, "sg_id": sg_id})

                elif source.startswith('sg-'):
                    for sg_ref in perm.get('UserIdGroupPairs', []):
                        if sg_ref['GroupId'] == source:
                            ref_sg_name = get_sg_name(ec2, source)
                            matched_rules.append({"type": "SG", "source": source, "match": source, "sg_name": ref_sg_name, "sg_id": source})

                elif source.startswith('pl-'):
                    for pl in perm.get('PrefixListIds', []):
                        if pl['PrefixListId'] == source:
                            matched_rules.append({"type": "PL", "source": source, "match": source, "sg_name": sg_name, "sg_id": sg_id})

    message = f"✅ {len(matched_rules)} rule(s) matched." if matched_rules else "❌ Access NOT allowed based on available SG rules."
    return {"message": message, "rules": matched_rules}

@app.route('/', methods=['GET', 'POST'])
def index():
    result = ''
    if request.method == 'POST':
        account = request.form['account'].strip()
        source = request.form['source'].strip()
        destination = request.form['destination'].strip()
        port = request.form['port'].strip()
        protocol = request.form['protocol'].strip()
        result = check_access(account, source, destination, port, protocol)
    return render_template_string(HTML_TEMPLATE, result=result)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5656)
